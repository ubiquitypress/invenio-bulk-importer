#
# This file is part of Invenio.
# Copyright (C) 2016-2018 CERN.
#
# Invenio is free software; you can redistribute it and/or modify it
# under the terms of the MIT License; see LICENSE file for more details.

"""Create invenio bulk importer tables."""

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.dialects import mysql, postgresql

# revision identifiers, used by Alembic.
revision = "1748879877"
down_revision = "1748879646"
branch_labels = ()
depends_on = "9848d0149abd"


def upgrade():
    """Upgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "importer_tasks_metadata",
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column("bucket_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column("started_by_id", sa.Integer(), nullable=True),
        sa.Column(
            "json",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["bucket_id"],
            ["files_bucket.id"],
            name=op.f("fk_importer_tasks_metadata_bucket_id_files_bucket"),
        ),
        sa.ForeignKeyConstraint(
            ["started_by_id"],
            ["accounts_user.id"],
            name=op.f("fk_importer_tasks_metadata_started_by_id_accounts_user"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_importer_tasks_metadata")),
    )
    op.create_index(
        op.f("ix_importer_tasks_metadata_bucket_id"),
        "importer_tasks_metadata",
        ["bucket_id"],
        unique=False,
    )
    op.create_table(
        "importer_records_metadata",
        sa.Column("task_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True),
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column(
            "json",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["importer_tasks_metadata.id"],
            name=op.f("fk_importer_records_metadata_task_id_importer_tasks_metadata"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_importer_records_metadata")),
    )
    op.create_table(
        "importer_tasks_files",
        sa.Column("id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column(
            "json",
            sa.JSON()
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "mysql")
            .with_variant(
                postgresql.JSONB(none_as_null=True, astext_type=sa.Text()), "postgresql"
            )
            .with_variant(sqlalchemy_utils.types.json.JSONType(), "sqlite"),
            nullable=True,
        ),
        sa.Column("version_id", sa.Integer(), nullable=False),
        sa.Column(
            "created",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column(
            "updated",
            sa.DateTime().with_variant(mysql.DATETIME(fsp=6), "mysql"),
            nullable=False,
        ),
        sa.Column(
            "key",
            sa.Text().with_variant(mysql.VARCHAR(length=255), "mysql"),
            nullable=False,
        ),
        sa.Column("record_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=False),
        sa.Column(
            "object_version_id", sqlalchemy_utils.types.uuid.UUIDType(), nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["object_version_id"],
            ["files_object.version_id"],
            name=op.f("fk_importer_tasks_files_object_version_id_files_object"),
            ondelete="RESTRICT",
        ),
        sa.ForeignKeyConstraint(
            ["record_id"],
            ["importer_tasks_metadata.id"],
            name=op.f("fk_importer_tasks_files_record_id_importer_tasks_metadata"),
            ondelete="RESTRICT",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_importer_tasks_files")),
    )
    op.create_index(
        op.f("ix_importer_tasks_files_object_version_id"),
        "importer_tasks_files",
        ["object_version_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_importer_tasks_files_record_id"),
        "importer_tasks_files",
        ["record_id"],
        unique=False,
    )
    op.create_index(
        "uidx_importer_tasks_files_record_id_key",
        "importer_tasks_files",
        ["record_id", "key"],
        unique=True,
    )
    op.alter_column(
        "collections_collection", "depth", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "collections_collection",
        "num_records",
        existing_type=sa.INTEGER(),
        nullable=False,
    )
    op.drop_index(op.f("uidx_communities_files_id_key"), table_name="communities_files")
    op.create_index(
        op.f("ix_communities_files_record_id"),
        "communities_files",
        ["record_id"],
        unique=False,
    )
    op.create_index(
        "uidx_communities_files_record_id_key",
        "communities_files",
        ["record_id", "key"],
        unique=True,
    )
    op.drop_index(
        op.f("ix_uq_partial_files_object_is_head"),
        table_name="files_object",
        postgresql_where="is_head",
    )
    op.alter_column(
        "oaiserver_set",
        "system_created",
        existing_type=sa.BOOLEAN(),
        server_default=None,
        existing_nullable=False,
    )
    op.drop_index(op.f("uidx_rdm_drafts_files_id_key"), table_name="rdm_drafts_files")
    op.create_index(
        op.f("ix_rdm_drafts_files_record_id"),
        "rdm_drafts_files",
        ["record_id"],
        unique=False,
    )
    op.create_index(
        "uidx_rdm_drafts_files_record_id_key",
        "rdm_drafts_files",
        ["record_id", "key"],
        unique=True,
    )
    op.drop_index(
        op.f("uidx_rdm_drafts_media_files_id_key"), table_name="rdm_drafts_media_files"
    )
    op.create_index(
        op.f("ix_rdm_drafts_media_files_record_id"),
        "rdm_drafts_media_files",
        ["record_id"],
        unique=False,
    )
    op.create_index(
        "uidx_rdm_drafts_media_files_record_id_key",
        "rdm_drafts_media_files",
        ["record_id", "key"],
        unique=True,
    )
    op.drop_index(op.f("uidx_rdm_records_files_id_key"), table_name="rdm_records_files")
    op.create_index(
        op.f("ix_rdm_records_files_record_id"),
        "rdm_records_files",
        ["record_id"],
        unique=False,
    )
    op.create_index(
        "uidx_rdm_records_files_record_id_key",
        "rdm_records_files",
        ["record_id", "key"],
        unique=True,
    )
    op.alter_column(
        "rdm_records_files_version",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "key",
        existing_type=sa.TEXT(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "record_id",
        existing_type=sa.UUID(),
        nullable=True,
        autoincrement=False,
    )
    op.create_index(
        op.f("ix_rdm_records_files_version_record_id"),
        "rdm_records_files_version",
        ["record_id"],
        unique=False,
    )
    op.drop_index(
        op.f("uidx_rdm_records_media_files_id_key"),
        table_name="rdm_records_media_files",
    )
    op.create_index(
        op.f("ix_rdm_records_media_files_record_id"),
        "rdm_records_media_files",
        ["record_id"],
        unique=False,
    )
    op.create_index(
        "uidx_rdm_records_media_files_record_id_key",
        "rdm_records_media_files",
        ["record_id", "key"],
        unique=True,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "key",
        existing_type=sa.TEXT(),
        nullable=True,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "record_id",
        existing_type=sa.UUID(),
        nullable=True,
        autoincrement=False,
    )
    op.create_index(
        op.f("ix_rdm_records_media_files_version_record_id"),
        "rdm_records_media_files_version",
        ["record_id"],
        unique=False,
    )
    op.alter_column(
        "rdm_records_secret_links",
        "origin",
        existing_type=sa.VARCHAR(length=255),
        server_default=None,
        existing_nullable=False,
    )
    op.alter_column(
        "rdm_records_secret_links",
        "description",
        existing_type=sa.TEXT(),
        server_default=None,
        existing_nullable=False,
    )
    # ### end Alembic commands ###


def downgrade():
    """Downgrade database."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "rdm_records_secret_links",
        "description",
        existing_type=sa.TEXT(),
        server_default=sa.text("''::text"),
        existing_nullable=False,
    )
    op.alter_column(
        "rdm_records_secret_links",
        "origin",
        existing_type=sa.VARCHAR(length=255),
        server_default=sa.text("''::character varying"),
        existing_nullable=False,
    )
    op.drop_index(
        op.f("ix_rdm_records_media_files_version_record_id"),
        table_name="rdm_records_media_files_version",
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "record_id",
        existing_type=sa.UUID(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "key",
        existing_type=sa.TEXT(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_media_files_version",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=False,
        autoincrement=False,
    )
    op.drop_index(
        "uidx_rdm_records_media_files_record_id_key",
        table_name="rdm_records_media_files",
    )
    op.drop_index(
        op.f("ix_rdm_records_media_files_record_id"),
        table_name="rdm_records_media_files",
    )
    op.create_index(
        op.f("uidx_rdm_records_media_files_id_key"),
        "rdm_records_media_files",
        ["id", "key"],
        unique=True,
    )
    op.drop_index(
        op.f("ix_rdm_records_files_version_record_id"),
        table_name="rdm_records_files_version",
    )
    op.alter_column(
        "rdm_records_files_version",
        "record_id",
        existing_type=sa.UUID(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "key",
        existing_type=sa.TEXT(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "updated",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        autoincrement=False,
    )
    op.alter_column(
        "rdm_records_files_version",
        "version_id",
        existing_type=sa.INTEGER(),
        nullable=False,
        autoincrement=False,
    )
    op.drop_index(
        "uidx_rdm_records_files_record_id_key", table_name="rdm_records_files"
    )
    op.drop_index(
        op.f("ix_rdm_records_files_record_id"), table_name="rdm_records_files"
    )
    op.create_index(
        op.f("uidx_rdm_records_files_id_key"),
        "rdm_records_files",
        ["id", "key"],
        unique=True,
    )
    op.drop_index(
        "uidx_rdm_drafts_media_files_record_id_key", table_name="rdm_drafts_media_files"
    )
    op.drop_index(
        op.f("ix_rdm_drafts_media_files_record_id"), table_name="rdm_drafts_media_files"
    )
    op.create_index(
        op.f("uidx_rdm_drafts_media_files_id_key"),
        "rdm_drafts_media_files",
        ["id", "key"],
        unique=True,
    )
    op.drop_index("uidx_rdm_drafts_files_record_id_key", table_name="rdm_drafts_files")
    op.drop_index(op.f("ix_rdm_drafts_files_record_id"), table_name="rdm_drafts_files")
    op.create_index(
        op.f("uidx_rdm_drafts_files_id_key"),
        "rdm_drafts_files",
        ["id", "key"],
        unique=True,
    )
    op.alter_column(
        "oaiserver_set",
        "system_created",
        existing_type=sa.BOOLEAN(),
        server_default=sa.text("false"),
        existing_nullable=False,
    )
    op.create_index(
        op.f("ix_uq_partial_files_object_is_head"),
        "files_object",
        ["bucket_id", "key"],
        unique=True,
        postgresql_where="is_head",
    )
    op.drop_index(
        "uidx_communities_files_record_id_key", table_name="communities_files"
    )
    op.drop_index(
        op.f("ix_communities_files_record_id"), table_name="communities_files"
    )
    op.create_index(
        op.f("uidx_communities_files_id_key"),
        "communities_files",
        ["id", "key"],
        unique=True,
    )
    op.alter_column(
        "collections_collection",
        "num_records",
        existing_type=sa.INTEGER(),
        nullable=True,
    )
    op.alter_column(
        "collections_collection", "depth", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_index(
        "uidx_importer_tasks_files_record_id_key", table_name="importer_tasks_files"
    )
    op.drop_index(
        op.f("ix_importer_tasks_files_record_id"), table_name="importer_tasks_files"
    )
    op.drop_index(
        op.f("ix_importer_tasks_files_object_version_id"),
        table_name="importer_tasks_files",
    )
    op.drop_table("importer_tasks_files")
    op.drop_table("importer_records_metadata")
    op.drop_index(
        op.f("ix_importer_tasks_metadata_bucket_id"),
        table_name="importer_tasks_metadata",
    )
    op.drop_table("importer_tasks_metadata")
    # ### end Alembic commands ###
